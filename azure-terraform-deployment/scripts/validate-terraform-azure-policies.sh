#!/bin/bash

# üîç TERRAFORM VALIDATION SCRIPT - Azure Policy Compliance
# Verifica compliance con pol√≠ticas antes del deployment

echo "üîç VALIDACI√ìN TERRAFORM - AZURE POLICY COMPLIANCE"
echo "================================================"
echo ""

# Colores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
TERRAFORM_DIR="/home/erdnando/proyectos/azure/GuiaAzureApp/azure-terraform-deployment"
VALIDATION_ERRORS=0

echo "${BLUE}üìã Iniciando validaci√≥n de Azure Policy compliance...${NC}"
echo ""

# Cambiar al directorio de Terraform
cd "$TERRAFORM_DIR" || exit 1

# 1. Verificar sintaxis de Terraform
echo "${BLUE}1Ô∏è‚É£ Validando sintaxis de Terraform...${NC}"
terraform validate
if [ $? -eq 0 ]; then
    echo "${GREEN}‚úÖ Sintaxis de Terraform v√°lida${NC}"
else
    echo "${RED}‚ùå Errores de sintaxis en Terraform${NC}"
    ((VALIDATION_ERRORS++))
fi
echo ""

# 2. Verificar formato de c√≥digo
echo "${BLUE}2Ô∏è‚É£ Verificando formato de c√≥digo...${NC}"
terraform fmt -check=true -recursive
if [ $? -eq 0 ]; then
    echo "${GREEN}‚úÖ Formato de c√≥digo correcto${NC}"
else
    echo "${YELLOW}‚ö†Ô∏è C√≥digo necesita formateo (ejecutar: terraform fmt -recursive)${NC}"
fi
echo ""

# 3. Validar variables de dev
echo "${BLUE}3Ô∏è‚É£ Validando configuraci√≥n de development...${NC}"
terraform plan \
    -var-file="environments/dev/terraform.tfvars" \
    -refresh=false \
    -detailed-exitcode \
    >/dev/null 2>&1

case $? in
    0)
        echo "${GREEN}‚úÖ Configuraci√≥n de dev v√°lida - sin cambios${NC}"
        ;;
    1)
        echo "${RED}‚ùå Error en configuraci√≥n de dev${NC}"
        ((VALIDATION_ERRORS++))
        ;;
    2)
        echo "${GREEN}‚úÖ Configuraci√≥n de dev v√°lida - cambios detectados${NC}"
        ;;
esac
echo ""

# 4. Validar variables de prod
echo "${BLUE}4Ô∏è‚É£ Validando configuraci√≥n de production...${NC}"
terraform plan \
    -var-file="environments/prod/terraform.tfvars" \
    -refresh=false \
    -detailed-exitcode \
    >/dev/null 2>&1

case $? in
    0)
        echo "${GREEN}‚úÖ Configuraci√≥n de prod v√°lida - sin cambios${NC}"
        ;;
    1)
        echo "${RED}‚ùå Error en configuraci√≥n de prod${NC}"
        ((VALIDATION_ERRORS++))
        ;;
    2)
        echo "${GREEN}‚úÖ Configuraci√≥n de prod v√°lida - cambios detectados${NC}"
        ;;
esac
echo ""

# 5. Verificar Azure Policy compliance en archivos
echo "${BLUE}5Ô∏è‚É£ Verificando Azure Policy compliance...${NC}"

# Verificar tag Project obligatorio
PROJECT_TAG_FOUND=$(grep -r "project.*=" environments/ | wc -l)
if [ "$PROJECT_TAG_FOUND" -gt 0 ]; then
    echo "${GREEN}‚úÖ Azure Policy 'Require a tag on resources': Project tag configurado${NC}"
else
    echo "${RED}‚ùå Azure Policy 'Require a tag on resources': Project tag faltante${NC}"
    ((VALIDATION_ERRORS++))
fi

# Verificar location canadacentral
LOCATION_CANADA=$(grep -r 'location.*=.*"canadacentral"' environments/ | wc -l)
if [ "$LOCATION_CANADA" -gt 0 ]; then
    echo "${GREEN}‚úÖ Azure Policy 'Allowed locations': canadacentral configurado${NC}"
else
    echo "${RED}‚ùå Azure Policy 'Allowed locations': location debe ser canadacentral${NC}"
    ((VALIDATION_ERRORS++))
fi

# Verificar que no haya locations no permitidas
INVALID_LOCATIONS=$(grep -r 'location.*=' environments/ | grep -v "canadacentral" | grep -v "var.location" | wc -l)
if [ "$INVALID_LOCATIONS" -eq 0 ]; then
    echo "${GREEN}‚úÖ No se encontraron locations no permitidas${NC}"
else
    echo "${RED}‚ùå Locations no permitidas encontradas - solo canadacentral est√° permitido${NC}"
    ((VALIDATION_ERRORS++))
fi
echo ""

# 6. Verificar governance tags en m√≥dulos
echo "${BLUE}6Ô∏è‚É£ Verificando governance tags en m√≥dulos...${NC}"

# Verificar que todos los m√≥dulos tengan common_tags
MODULES_WITH_TAGS=$(find modules/ -name "*.tf" -exec grep -l "common_tags" {} \; | wc -l)
TOTAL_MODULES=$(find modules/ -maxdepth 1 -type d | tail -n +2 | wc -l)

echo "   üìä M√≥dulos con governance tags: $MODULES_WITH_TAGS/$TOTAL_MODULES"

if [ "$MODULES_WITH_TAGS" -eq "$TOTAL_MODULES" ]; then
    echo "${GREEN}‚úÖ Todos los m√≥dulos implementan governance tags${NC}"
else
    echo "${RED}‚ùå Algunos m√≥dulos no implementan governance tags${NC}"
    ((VALIDATION_ERRORS++))
fi

# Verificar tags espec√≠ficos en main.tf
REQUIRED_TAGS=("Project" "Environment" "CostCenter" "Owner" "CreatedBy" "ManagedBy" "Purpose")
for tag in "${REQUIRED_TAGS[@]}"; do
    if grep -q "$tag" main.tf; then
        echo "${GREEN}   ‚úÖ Tag '$tag' encontrado${NC}"
    else
        echo "${RED}   ‚ùå Tag '$tag' faltante${NC}"
        ((VALIDATION_ERRORS++))
    fi
done
echo ""

# 7. Verificar estructura de m√≥dulos
echo "${BLUE}7Ô∏è‚É£ Verificando estructura de m√≥dulos...${NC}"

EXPECTED_MODULES=("infrastructure" "postgresql" "monitoring" "container-environment" "container-apps" "application-gateway")
for module in "${EXPECTED_MODULES[@]}"; do
    if [ -d "modules/$module" ] && [ -f "modules/$module/main.tf" ]; then
        echo "${GREEN}   ‚úÖ M√≥dulo '$module' existe y tiene main.tf${NC}"
    else
        echo "${RED}   ‚ùå M√≥dulo '$module' faltante o incompleto${NC}"
        ((VALIDATION_ERRORS++))
    fi
done
echo ""

# 8. Verificar outputs de compliance
echo "${BLUE}8Ô∏è‚É£ Verificando outputs de compliance...${NC}"
if grep -q "compliance_summary" main.tf; then
    echo "${GREEN}‚úÖ Output de compliance_summary encontrado${NC}"
else
    echo "${RED}‚ùå Output de compliance_summary faltante${NC}"
    ((VALIDATION_ERRORS++))
fi
echo ""

# Resumen final
echo "${BLUE}üìã RESUMEN DE VALIDACI√ìN${NC}"
echo "========================"
echo ""

if [ $VALIDATION_ERRORS -eq 0 ]; then
    echo "${GREEN}üéâ VALIDACI√ìN EXITOSA${NC}"
    echo "${GREEN}‚úÖ Todos los checks pasaron${NC}"
    echo "${GREEN}‚úÖ Terraform est√° listo para deployment${NC}"
    echo "${GREEN}‚úÖ Azure Policy compliance verificado${NC}"
    echo ""
    echo "${BLUE}üí° Pr√≥ximos pasos:${NC}"
    echo "   1. üöÄ Ejecutar deployment con ./scripts/deploy-dev.sh"
    echo "   2. üß™ Realizar pruebas post-deployment"
    echo "   3. üìä Verificar compliance en Azure Portal"
    echo ""
    exit 0
else
    echo "${RED}‚ùå VALIDACI√ìN FALL√ì${NC}"
    echo "${RED}üö® $VALIDATION_ERRORS errores encontrados${NC}"
    echo ""
    echo "${YELLOW}üîß Acciones requeridas:${NC}"
    echo "   1. üîç Revisar los errores arriba"
    echo "   2. üõ†Ô∏è Corregir problemas identificados"
    echo "   3. üîÑ Re-ejecutar validaci√≥n"
    echo ""
    exit 1
fi
